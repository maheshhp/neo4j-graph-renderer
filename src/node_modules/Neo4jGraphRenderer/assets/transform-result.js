export const transformResult = (res) => {
  const cols = res.results[0].columns;
  const rows = res.results[0].data.map(row => {
    const r = {};
    cols.forEach((col, index) => {
      r[col] = row.row[index];
    });
    return r;
  });
  const nodes = [];
  let relations = [];
  let labels = [];

  res.results[0].data.forEach(row => {
    row.graph.nodes.forEach(n => {
      const found = nodes.filter(m => m.id === n.id).length > 0;
      if (!found) {
        for (let p in n.properties || {}) {
          n[p] = n.properties[p];
          delete n.properties[p];
        }
        delete n.properties;
        nodes.push(n);
        labels = labels.concat(n.labels.filter(l => labels.indexOf(l) === -1));
      }
    });
    relations = relations.concat(row.graph.relationships.map(r => {
      return { id: r.id, start: r.startNode, end: r.endNode, type: r.type }
    }));
  });
  return ({ table: rows, graph: { nodes: nodes, links: relations }, labels: labels });
}

export default { transformResult };